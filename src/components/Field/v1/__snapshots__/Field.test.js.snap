// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders with help text 1`] = `
.c0 {
  margin: 0.9375rem 0;
}

.c3 {
  color: #737373;
  display: block;
  font-size: 0.875rem;
  margin: 0.625rem 0 0;
}

.c1 {
  background-color: #fafafa;
  border: 1px solid #cccccc;
  border-radius: 0.125rem;
  box-sizing: border-box;
  color: #3c3c3c;
  crsor: pointer;
  font-family: inherit;
  font-size: 0.875rem;
  line-height: 1;
  outline: none;
  padding: 0.75rem 0.625rem;
  width: 100%;
}

.c1::-webkit-input-placeholder {
  color: #cccccc;
}

.c1::-moz-placeholder {
  color: #cccccc;
}

.c1:-ms-input-placeholder {
  color: #cccccc;
}

.c1::placeholder {
  color: #cccccc;
}

.c1:focus {
  border-color: #8ce0c9;
}

.c1:-moz-read-only {
  color: #bfbfbf;
}

.c1:read-only {
  color: #bfbfbf;
}

.c2 {
  box-sizing: border-box;
  color: #737373;
  fill: currentColor;
  font-size: 0.875rem;
  height: 1rem;
  position: absolute;
  right: 0.75rem;
  top: 0.75rem;
  width: 1rem;
}

.c2 * {
  display: inline-block;
}

<div
  className="c0"
>
  <p>
    Text above
  </p>
  <div
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <input
      className="c1"
      maxLength={undefined}
      name="test"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyPress={[Function]}
      placeholder={undefined}
      readOnly={false}
      type="text"
      value=""
    />
    <div
      className="c2"
      onClick={[Function]}
      value=""
    />
  </div>
  <p>
    Text below
  </p>
  <span
    className="c3"
  >
    Foo
  </span>
</div>
`;

exports[`renders with label 1`] = `
.c0 {
  margin: 0.9375rem 0;
}

.c1 {
  color: #737373;
  display: block;
  font-size: 0.875rem;
  line-height: 1.25;
  margin: 0 0 0.625rem;
}

.c2 {
  background-color: #fafafa;
  border: 1px solid #cccccc;
  border-radius: 0.125rem;
  box-sizing: border-box;
  color: #3c3c3c;
  crsor: pointer;
  font-family: inherit;
  font-size: 0.875rem;
  line-height: 1;
  outline: none;
  padding: 0.75rem 0.625rem;
  width: 100%;
}

.c2::-webkit-input-placeholder {
  color: #cccccc;
}

.c2::-moz-placeholder {
  color: #cccccc;
}

.c2:-ms-input-placeholder {
  color: #cccccc;
}

.c2::placeholder {
  color: #cccccc;
}

.c2:focus {
  border-color: #8ce0c9;
}

.c2:-moz-read-only {
  color: #bfbfbf;
}

.c2:read-only {
  color: #bfbfbf;
}

.c3 {
  box-sizing: border-box;
  color: #737373;
  fill: currentColor;
  font-size: 0.875rem;
  height: 1rem;
  position: absolute;
  right: 0.75rem;
  top: 0.75rem;
  width: 1rem;
}

.c3 * {
  display: inline-block;
}

<div
  className="c0"
>
  <label
    className="c1"
    htmlFor={undefined}
  >
    Foo
  </label>
  <p>
    Text above
  </p>
  <div
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <input
      className="c2"
      maxLength={undefined}
      name="test"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyPress={[Function]}
      placeholder={undefined}
      readOnly={false}
      type="text"
      value=""
    />
    <div
      className="c3"
      onClick={[Function]}
      value=""
    />
  </div>
  <p>
    Text below
  </p>
</div>
`;

exports[`renders with no help text 1`] = `
.c0 {
  margin: 0.9375rem 0;
}

.c1 {
  background-color: #fafafa;
  border: 1px solid #cccccc;
  border-radius: 0.125rem;
  box-sizing: border-box;
  color: #3c3c3c;
  crsor: pointer;
  font-family: inherit;
  font-size: 0.875rem;
  line-height: 1;
  outline: none;
  padding: 0.75rem 0.625rem;
  width: 100%;
}

.c1::-webkit-input-placeholder {
  color: #cccccc;
}

.c1::-moz-placeholder {
  color: #cccccc;
}

.c1:-ms-input-placeholder {
  color: #cccccc;
}

.c1::placeholder {
  color: #cccccc;
}

.c1:focus {
  border-color: #8ce0c9;
}

.c1:-moz-read-only {
  color: #bfbfbf;
}

.c1:read-only {
  color: #bfbfbf;
}

.c2 {
  box-sizing: border-box;
  color: #737373;
  fill: currentColor;
  font-size: 0.875rem;
  height: 1rem;
  position: absolute;
  right: 0.75rem;
  top: 0.75rem;
  width: 1rem;
}

.c2 * {
  display: inline-block;
}

<div
  className="c0"
>
  <p>
    Text above
  </p>
  <div
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <input
      className="c1"
      maxLength={undefined}
      name="test"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyPress={[Function]}
      placeholder={undefined}
      readOnly={false}
      type="text"
      value=""
    />
    <div
      className="c2"
      onClick={[Function]}
      value=""
    />
  </div>
  <p>
    Text below
  </p>
</div>
`;

exports[`renders with no label 1`] = `
.c0 {
  margin: 0.9375rem 0;
}

.c1 {
  background-color: #fafafa;
  border: 1px solid #cccccc;
  border-radius: 0.125rem;
  box-sizing: border-box;
  color: #3c3c3c;
  crsor: pointer;
  font-family: inherit;
  font-size: 0.875rem;
  line-height: 1;
  outline: none;
  padding: 0.75rem 0.625rem;
  width: 100%;
}

.c1::-webkit-input-placeholder {
  color: #cccccc;
}

.c1::-moz-placeholder {
  color: #cccccc;
}

.c1:-ms-input-placeholder {
  color: #cccccc;
}

.c1::placeholder {
  color: #cccccc;
}

.c1:focus {
  border-color: #8ce0c9;
}

.c1:-moz-read-only {
  color: #bfbfbf;
}

.c1:read-only {
  color: #bfbfbf;
}

.c2 {
  box-sizing: border-box;
  color: #737373;
  fill: currentColor;
  font-size: 0.875rem;
  height: 1rem;
  position: absolute;
  right: 0.75rem;
  top: 0.75rem;
  width: 1rem;
}

.c2 * {
  display: inline-block;
}

<div
  className="c0"
>
  <p>
    Text above
  </p>
  <div
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <input
      className="c1"
      maxLength={undefined}
      name="test"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyPress={[Function]}
      placeholder={undefined}
      readOnly={false}
      type="text"
      value=""
    />
    <div
      className="c2"
      onClick={[Function]}
      value=""
    />
  </div>
  <p>
    Text below
  </p>
</div>
`;

exports[`renders with other props 1`] = `
.c0 {
  margin: 0.9375rem 0;
}

.c1 {
  color: #737373;
  display: block;
  font-size: 0.875rem;
  line-height: 1.25;
  margin: 0 0 0.625rem;
}

<div
  className="className c0"
>
  <label
    className="labelClassName c1"
    htmlFor="labelFor"
  >
    Foo
  </label>
  <p>
    Blah
  </p>
</div>
`;
